.TH "lcmark" "1" "January 1, 2016" "" ""
.SH
NAME
.PP
lcmark \- flexible command line CommonMark parser and renderer
.SH
SYNOPSIS
.PP
lcmark [options] [file..]
.SH
DESCRIPTION
.PP
\f[C]lcmark\f[] does what the \f[C]cmark\f[] (https://github.com/jgm/cmark)
program does, with the following enhancements:
.IP \[bu] 2
Support for \f[B]YAML metadata\f[] at the top of the document.
The metadata is parsed as CommonMark and returned in
a table (dictionary) that will set template variables.
.IP \[bu] 2
Support for \f[B]templates\f[], which add headers
and footers around the body of the document, and can
include variables defined in the metadat.
.IP \[bu] 2
Support for \f[B]filters\f[], which allow the document to be
transformed between parsing and rendering, making possible
a large number of customizations.
.SH
OPTIONS
.PP
\f[C]\-\-to,\-t\f[] \f[I]format\f[]
.PP
Specify format for output.
\f[I]format\f[] can be \f[C]commonmark\f[], \f[C]html\f[], \f[C]man\f[], \f[C]xml\f[], or \f[C]latex\f[].
.PP
\f[C]\-\-output,\-o\f[] \f[I]file\f[]
.PP
Write output to \f[I]file\f[].
.PP
\f[C]\-\-columns,\-c\f[] \f[I]NUMBER\f[]
.PP
Specify number of columns for text wrapping in supported
formats. The default is 0 = no wrapping.
.PP
\f[C]\-\-filter,\-F\f[] \f[I]file[,file]\f[]
.PP
Filter the parsed AST using a lua script. See FILTERS
below for details.
.PP
\f[C]\-\-template,\-T\f[] \f[I]file\f[]
.PP
Insert converted text and metadata into a template. See TEMPLATES,
below, for template format.
.PP
\f[C]\-\-smart\f[]
.PP
Enable smart typography (straight quotes are turned into
curly quotes, \f[C]\-\-\f[] into en dashes, \f[C]\-\-\-\f[] into em dashes,
\f[C]...\f[] into ellipses).
.PP
\f[C]\-\-safe\f[]
.PP
Suppress raw HTML and unsafe links (\f[C]javascript:\f[], \f[C]file:\f[],
\f[C]vbscript:\f[], and \f[C]data:\f[], except for \f[C]image/png\f[], \f[C]image/gif\f[],
\f[C]image/jpeg\f[], or \f[C]image/webp\f[] mime types).
.PP
\f[C]\-\-hardbreaks\f[]
.PP
Render softbreak elements (newlines in paragraphs) as hard
line breaks.
.PP
\f[C]\-\-sourcepos\f[]
.PP
Include source position information in html/xml attributes.
.PP
\f[C]\-\-version,\-V\f[]
.PP
Print version information.
.PP
\f[C]\-\-help,\-h\f[]
.PP
This message
.SH
TEMPLATES
.PP
By default, lcmark will produce a fragment. If the \f[C]\-\-template\f[]
option is specified, it will insert this fragment into a
template, producing a standalone document with appropriate
header and footer. The template is sought first in the working
directory, then in \f[C]templates\f[], and finally in
\f[C]$HOME/lcmark/templates\f[]. If no extension is given, the name of
the writer will be used as an extension. So, for example, one
can put the template \f[C]letter.html\f[] in the
\f[C]$HOME/lcmark/templates\f[] directory, and use it anywhere with
\f[C]lcmark \-\-template letter\f[].
.PP
Variables are taken from YAML metadata; the fields are interpreted
as CommonMark and rendered appropriately for the output format.
The following additional variables are set automatically:
.IP \[bu] 2
\f[C]body\f[]: the document body
.PP
\f[C]lcmark\f[] uses the same templating language as
pandoc (http://pandoc.org), and pandoc templates can be
used with \f[C]lcmark\f[] (with the caveat that pandoc sets many
variables automatically which \f[C]lcmark\f[] does not). A short
guide:
.IP \[bu] 2
The only special character in templates is \f[C]$\f[]. To get
a literal \f[C]$\f[] character, use \f[C]$$\f[].
.IP \[bu] 2
\f[C]$title$\f[] will be replaced with the value of the \f[C]title\f[]
metadata field, interpreted as CommonMark and rendered into
the target format. Variable names can contain alphanumerics,
\f[C]\-\f[], and \f[C]_\f[].
.IP \[bu] 2
\f[C]$author.name$\f[] will be replaced with the \f[C]author\f[] field
of the \f[C]name\f[] metadata field (assumed to be a map).
.IP \[bu] 2
\f[C]$if(author)$...$endif$\f[] will be
replaced by the material in \f[C]...\f[] if \f[C]author\f[] has a
"truish" value, otherwise by nothing.
Truish values are everything except \f[C]false\f[],
\f[C]nil\f[], or an empty table \f[C]{}\f[]. The material in \f[C]...\f[] may
contain variables, surrounded by \f[C]$\f[] as above.
.IP \[bu] 2
\f[C]$if(author)$...$else$\-\-\-$endif$\f[] will be
replaced by the material in \f[C]...\f[] if \f[C]author\f[] has a truish
value, and by the material in \f[C]\-\-\-\f[] otherwise.
.IP \[bu] 2
\f[C]$for(author)$...$author$...$endfor$\f[] is a loop,
producing successive copies of \f[C]...$author$...\f[] with
\f[C]$author$\f[] replaced, in each occurrence, with a
different value from the table \f[C]author\f[]. If \f[C]author\f[]
is not a table but is truish, one copy of the contents
will be produced. If \f[C]author\f[] is an empty table or is
falsish, nothing will be produced.
.IP \[bu] 2
\f[C]$for(author)$...$author$...$sep$\-\-\-$endfor$\f[] is like
the above, except that the string \f[C]\-\-\-\f[] is inserted between
each copy.
.IP \[bu] 2
If a newline occurs after \f[C]$if(variable)$\f[], it is ignored
(as is a newline before \f[C]$else$\f[], and before and after
\f[C]$endif$\f[]). The point of this is to allow authors to make
templates more readable without introducing spurious
blank lines into the rendered document.
.IP \[bu] 2
Similarly, if a newline occurs after \f[C]$for(variable)$\f[], it is
ignored (as is a newline before \f[C]$sep$\f[], and before and after
\f[C]$endfor$\f[]).
.SH
FILTERS
.PP
Filters modify the parsed document prior to rendering.
.PP
A filter is a function that takes three arguments ('doc',
\&'meta', 'to'), where 'doc' is a cmark node, 'meta' is a nested
lua table whose leaf nodes are cmark nodes, and 'to' is a string
specifying the output format. The function may destructively
modify 'doc' and 'meta'.
.PP
For examples, see the \f[C]filters/\f[] directory in the source
repository.
.PP
The arguments to \f[C]\-\-filter\f[] should be lua scripts that \f[C]return\f[]
a filter function, as defined above. Filters will be run in the
order listed. Filters are applied to the root document node,
not to metadata (although a filter can operate on metadata if
desired).
.SH
EXAMPLES
.IP
.nf
\f[C]
lcmark
\f[]
.fi
.PP
acts as a filter, reading markdown from stdin and writing
HTML to stdout.
.IP
.nf
\f[C]
lcmark \-\-smart \-t latex
\f[]
.fi
.PP
acts as a filter, reading markdown with smart typography
and definition list extensions from stdin, and writing
LaTeX to stdout.
.IP
.nf
\f[C]
lcmark \-t latex \-o mybook.tex ch{1,2,3}.txt references.txt
\f[]
.fi
.PP
reads \f[C]ch1.txt\f[], \f[C]ch2.txt\f[], \f[C]ch3.txt\f[], and \f[C]references.txt\f[],
concatenates them, and converts the result from markdown to LaTeX.
.IP
.nf
\f[C]
lcmark \-\-template letter \-t latex \-o myletter.tex myletter.txt
\f[]
.fi
.PP
produces a LaTeX file using the template \f[C]letter.latex\f[].

.SH AUTHORS
John MacFarlane
